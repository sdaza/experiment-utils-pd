[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "experiment-utils-pd"
version = "0.1.2"
description = "Set of utility functions for analyzing experimental and observational data"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Sebastian Daza", email = "sebastian.daza@gmail.com" }
]

# License info
license = { file = "LICENSE" }

# PyPI classifiers
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Development Status :: 3 - Alpha"
]

dependencies = [
    "numpy>=1.21.5",
    "pandas>=1.4.4",
    "matplotlib>=3.5.2",
    "seaborn>=0.11.2",
    "multiprocess>=0.70.14",
    "threadpoolctl>=3.5.0",
    "statsmodels>=0.13.2",
    "scipy>=1.9.1",
    "linearmodels>=6.1",
    "scikit-learn==1.5.2",
    "xgboost>=2.1.3",
    "pytest>=8.3.5",
    "ruff>=0.11.7",
    "ipykernel>=6.29.5",
    "build>=1.3.0",
    "twine>=6.1.0",
]

[tool.setuptools.packages.find]
where = ["."]  # ["."] by default
include = ["experiment_utils*"]  # ["*"] by default
exclude = ["tests*"]  # empty by default

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "mypy>=1.14.1",
    "ruff>=0.9.4",
]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 120
indent-width = 4
#target-version = "py313" TODO: parametrize

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B"]
ignore = [
    "INP001"  # File `docs/conf.py` is part of an implicit namespace package. Add an `__init__.py`.
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"
